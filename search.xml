<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typora上传图片到hexo</title>
    <url>/2020/09/05/SMART%E5%8E%9F%E5%88%99%EF%BC%8C%E6%98%AF%E4%B8%80%E9%A1%B9%E5%BE%88%E8%91%97%E5%90%8D%E7%9A%84%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86%E6%B3%95%E5%88%99%EF%BC%8C%E6%9C%80%E6%97%A9%E7%94%B1%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%88%E5%BD%BC%E5%BE%97%C2%B7%E5%BE%B7%E9%B2%81%E5%85%8B%E5%9C%A8%E3%80%8A%E7%AE%A1%E7%90%86%E5%AE%9E%E8%B7%B5%E3%80%8B%E4%B8%80%E4%B9%A6%E4%B8%AD%E6%8F%90%E5%87%BA%EF%BC%8C%E5%85%B7%E4%BD%93%E5%8C%85%E6%8B%AC%E4%BA%94%E9%A1%B9%E5%8E%9F%E5%88%99%EF%BC%9A/</url>
    <content><![CDATA[<p>SMART原则，是一项很著名的目标管理法则，最早由管理大师彼得·德鲁克在《管理实践》一书中提出，具体包括五项原则：<a id="more"></a></p>
<p>Ø 有时限的（Time-bound）</p>
<p>Ø 具体的（Specific）</p>
<p>Ø 有相关性的（Relevant）</p>
<p>Ø 现实可以达到的（Attainable）</p>
<p>Ø 可以衡量的（Measurable）</p>
<p><img src="https://pic4.zhimg.com/v2-aed51c8cc69a7d1e58210e466182f4f3_b.jpg" alt="img"></p>
<p>​                                                              </p>
<p>曾经有三组人，分别向十公里外的三个村庄前进。</p>
<p>第一组的人不知道村庄名字，不知道路程远近，只被告知跟着向导走即可；</p>
<p>第二组的人知道村庄名字，知道路程多远，但是路边没有里程碑，无法衡量；</p>
<p>第三组的人知道村庄名字，知道路程远近，同时每走一公里都会看到里程碑。</p>
<p>根据上述信息判断，你觉得哪一组最先到达目的地？</p>
<p>第三组！</p>
<p>因为第三组的人有明确的目标，知道总体路程，而且还清楚距离目的地有多远，可以调整前进速度。他们的目标完全遵循smart法则，目标清晰、可衡量、可实现，所以很容易面对行程中的困难，并战胜它们，迅速到达目的地。</p>
<p>有人问：做事情为什么要有目标？</p>
<p>因为没有目标，就没有效率可言！</p>
<p>人生可以没有目标，做事情也可以没有目标，不可否认，这是很多人的人生态度。但如果你是一个有追求的人，渴望成为高效能人士，你必须在目标的指引下行事，这样才能确保达到最高效率。</p>
<p>目标无法达成是会让人失望的，如果一直没办法实现目标，人们就会失去希望，不再努力。目标之所以带给人们快乐，必须遵循可实现的原则。人的欲望是无穷尽的，今年你挣了10万元，明年就希望能赚15万元，如果超出预期，你肯定会感到开心，如果没能达到预期你自然会感到失望。</p>
<p>之所以要运用smart原则，就是防止这种目标未能实现从而带来挫败感的情况发生。</p>
<p>Ø 有时限的（Time-bound）</p>
<p>目标必须是有时限的，不能无止境等下去。明日复明日，明日何其多。很多人的拖延症就是这样养成的。</p>
<p>人都是有惰性的，99%的人又是贪图安逸的，所以一个没有时限的目标是不会完成的。就拿写作这件事来说，现在很多写书的作者都是兼职，有些人工作繁忙，闲暇时间本来就不多，那么一本书可能写上一两年。那么，在今天这个讲究效率的时代，一个选题写上一两年，恐怕等你写好了，这个热点也过去了，你的书写得再好也没有价值了。所以，我们在设定目标的时候，一定要有截止日期；</p>
<p>Ø 具体的（Specific）</p>
<p>模糊的目标不利于被执行，假设你说自己的目标是变得更加富有。这样的目标就不符合smart原则，同样也不会让你变得高效。因为你的目标过于模糊，“富有”是什么标准？你必须将目标数字化，比如你要年收入达到40万，实现财务自由。这样的目标才是具体的，一旦确定了具体目标，才会为之行动，要怎么做才能在一年内赚40万？一旦感到压力，人们就会开始行动起来；</p>
<p>Ø 有相关性的（Relevant）</p>
<p>高效能人士的职业生涯都是有延续性的，他们不断积累，不断成长，而且目标从不间断。这些人设定目标都是相互关联的，三年目标、五年目标、十年目标，这遵循着一条主线。</p>
<p>大学读财务专业，毕业后先从出纳做起，然后做会计，之后考会计师资格证书，终极目标则是成为注册会计师或者独立创业。每一步都是相互关联的，不会像低效率人士，今天做销售，明天做文案，后天又去做物业。</p>
<p>你以为自己是全才，实际上哪一行都没有做精，最后只能越混越差；</p>
<p>Ø 现实可以达到的（Attainable）</p>
<p>也就是可实现性，对高效人士来说，任何不可实现的目标都是没有意义的，只会打击人们的积极性。如果你设定了一个不可能实现的目标，那么这样做的意义何在呢？</p>
<p>你目前的薪水是每个月5000元，积蓄10万元，你告诉自己，明年一定要在北京买一套房。在不借助家人资助的情况下，目标实现的可能性为零。这样的目标无法实现，所以毫无意义。</p>
<p>建议设定目标的时候一定要多问问相关专业人士，不要盲目；</p>
<p>Ø 可以衡量的（Measurable）</p>
<p>前面提到了目标要具体，那么目标可衡量就是要通过数据作为衡量标准。假设你是销售人员，这个月希望业绩有所提升，那么就要结合上个月业绩给出具体标准，例如上个月完成了50万的业绩，这个月至少要提高20%，也就是达到60万的业绩。</p>
<p>可衡量，就是要有参照标准，一旦有对比，就会有压力，就会更积极的付诸行动。 </p>
]]></content>
  </entry>
  <entry>
    <title>Typora上传图片到hexo</title>
    <url>/2020/09/05/Typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0hexo/</url>
    <content><![CDATA[<p>在使用hexo搭建了博客之后，寻找之后发现Typora是一款很好用的markdown编辑器，不过未经设置是无法上传图片的。</p>
<a id="more"></a>

<h1 id="Typora上传图片到hexo的设置"><a href="#Typora上传图片到hexo的设置" class="headerlink" title="Typora上传图片到hexo的设置"></a>Typora上传图片到hexo的设置</h1><p>​    在使用hexo搭建了博客之后，寻找之后发现Typora是一款很好用的markdown编辑器，不过未经设置是无法上传图片的。</p>
<p>​    关于图片和图片路径的设置如下：</p>
<p>​    所有博客文件均保存在blog/source/下，首先在bolg/source下创建images文件夹用来存放博客中的图片，然后打开typora的偏好设置，进行如下设置。</p>
<p><img src="https://img-blog.csdnimg.cn/2019090318384447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNjIzMzYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>​    这样所有图片就会保存在/source/images/博客文件名/图片名</p>
<p>​    如上设置便可以在hexo中同步图片显示。</p>
<p>​    设置显示图片的方法要点：</p>
<p>​    有可能在第一次设置的时候不生效，需要设置完毕写两篇以上的博文才可实现效果</p>
]]></content>
  </entry>
  <entry>
    <title>java数组</title>
    <url>/2020/09/09/java%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>我们来比较房屋和公寓楼。一套普通房屋通常只住一个家庭，但一栋公寓楼可以分为很多套公寓。要将信件送给居住在房屋中的家庭，需要指出房屋的唯一地址。要将信件送给居住在公寓楼中的家庭，需要写明公寓楼的唯一地址和公寓号。</p>
<a id="more"></a>

<h2 id="java数组"><a href="#java数组" class="headerlink" title="java数组"></a>java数组</h2><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><p>数组是一种数据类型，可以存储多个值，而不仅仅是一个值。</p>
<p>我们来比较房屋和公寓楼。一套普通房屋通常只住一个家庭，但一栋公寓楼可以分为很多套公寓。要将信件送给居住在房屋中的家庭，需要指出房屋的唯一地址。要将信件送给居住在公寓楼中的家庭，需要写明公寓楼的唯一地址和公寓号。</p>
<p>数组变量就像一个公寓楼变量。可以在其中存储很多（而不仅仅是一个）值。此类变量有多个公寓（元素），可以使用公寓号（索引）来引用它们。要执行此操作，请在数组变量名称后的方括号中指出要访问的数组元素的索引。</p>
<p>公寓楼变量（数组变量）可以包含任何类型的元素。只需写入‘<strong>TypeName[] variable_name</strong>’而不是‘<strong>TypeName variable_name</strong>’</p>
<table>
<thead>
<tr>
<th><code>String[] list = new String[5];</code></th>
<th>创建包含 <code>5</code> 个元素的 <code>String</code> 数组</th>
</tr>
</thead>
<tbody><tr>
<td>int listCount = list.length;</td>
<td>将值 5 赋给 <code>listCount</code>，这是 <code>list</code> 数组中元素的数量。<code>list.length</code> 存储数组长度（元素数量）</td>
</tr>
<tr>
<td>list[1] = “妈妈”; String s = list[1];</td>
<td>将对象分配给数组元素时，需要在方括号中指出元素索引。</td>
</tr>
<tr>
<td>for (int i = 0; i &lt; list.length; i++) {     System.out.println(list[i]); }</td>
<td>在屏幕上显示所有数组元素的值。</td>
</tr>
<tr>
<td>System.out.println(list[0]); System.out.println(list[1]); System.out.println(list[2]); System.out.println(list[3]); System.out.println(list[4]);</td>
<td>将显示五个‘<strong>null</strong>’值。</td>
</tr>
</tbody></table>
<p>数组变量需要额外的初始化。必须先创建一个容纳 N 个元素的容器，然后才能开始将值放入容器中。</p>
<table>
<thead>
<tr>
<th><code>String[] list = null;</code></th>
<th><code>list</code> 数组变量为 <strong>null</strong>。它只能存储对包含元素的容器的引用。你必须单独创建容器。</th>
</tr>
</thead>
<tbody><tr>
<td><code>String[] list = new String[5];</code></td>
<td>创建包含 <code>5</code> 个元素的容器，并分配对 <code>list</code> 变量的引用。此容器包含编号为 0、1、2、3 和 4 的 5 个公寓（元素）。</td>
</tr>
<tr>
<td><code>String[] list = new String[1];</code></td>
<td>创建包含 <code>1</code> 个元素的容器，并分配对 <code>list</code> 变量的引用。要向此容器内放入内容，我们要编写类似 <code>list[0] = &quot;哟！&quot;;</code> 的代码。</td>
</tr>
<tr>
<td><code>String[] list = new String[0];</code></td>
<td>创建包含 <code>0</code> 个元素的容器，并分配对 <code>list</code> 变量的引用。不能在此容器中存储任何内容。</td>
</tr>
</tbody></table>
<p><strong>数组的基本情况：</strong></p>
<ol>
<li><p>数组由很多元素构成。</p>
</li>
<li><p>要访问某个元素，请指出其编号（索引）。</p>
</li>
<li><p>所有元素都属于同一类型。</p>
</li>
<li><p>所有元素的初始值都为 null；对于原始类型的数组，初始值为 0、0.0（对于小数）或 false（对于 boolean 值）。它与不在数组中的未初始化变量完全相同。</p>
</li>
<li><p>String[] list 仅声明一个变量。你需要先创建一个数组（容器），放入一些内容，然后才能使用它（请参见下面的示例）。</p>
</li>
<li><p>创建数组（容器）对象时，需要指出其长度或元素数量。使用 new TypeName[n]; 执行此操作。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><code>String s; String[] list;</code></th>
<th><code>s</code> 等于 null <code>list</code> 等于 null</th>
</tr>
</thead>
<tbody><tr>
<td><code>list = new String[10]; int n = list.length;</code></td>
<td><code>list</code> 变量存储对象的引用 – 一个 10 元素字符串数组 n 等于 10</td>
</tr>
<tr>
<td><code>list = new String[0];</code></td>
<td>现在，<code>list</code> 包含一个 <code>0</code> 元素数组。数组存在，但不能存储字符串。</td>
</tr>
<tr>
<td><code>list = null; System.out.println(list[1]);</code></td>
<td>这将抛出异常（运行时错误），并且程序将异常终止：<code>list</code> 包含 null 引用。</td>
</tr>
<tr>
<td><code>list = new String[10]; System.out.println(list[11]);</code></td>
<td>这将抛出异常（运行时错误）：数组索引超出范围。如果 <code>list</code> 包含 10 个元素，则有效索引为：0、1、2、3、4、5、6、7、8 和 9（总共 10 个索引）。</td>
</tr>
</tbody></table>
<h3 id="内存中的数组"><a href="#内存中的数组" class="headerlink" title="内存中的数组"></a>内存中的数组</h3><p>数组在内存中的云</p>
]]></content>
  </entry>
</search>
